1 文件上传，保存到web服务器本地

    存到/tmp目录，做到自动删除，删除时机是重启（还是需要手动删除）

    问题，文件名应该如何设置 /tmp/1.txt /tmp/2.txt 使用用户的文件名来存储?


        并发情况下，多个用户同时上传一个同名的文件，出现同名覆盖的问题
        将文件名设置为抗碰撞


        mkstemp  创建一个命名唯一的临时文件

        #include<stdlib.>
        int mkstemp(char *template);
        template是一个模板，最后必须使用XXXXXX作为结束，mkstemp
        会自动替换这个6个X，替换成一个唯一的字符串，  template也是一个传出参数

        返回值是一个文件描述符，文件已经打开，只要往里边写东西就可以





2 文件列表
    工作量大部分是在客户端


    文件列表的获取，查数据库
    最终要获取的数据列表如下
    {
        "code": 0,
        "files":    [{
                "fileName": "Untitled.png",          文件名  user_file_list
                "url":  "http://192.168.177.137:80/group1/M00/00/00/fwAAAVrFqE6ATjeqAACbkB032Qc1589224",
                                                     http://ip:port/文件id
                "md5":  "b25b7dcc3a096aec9251165ba251e918",       文件MD5 file_info表
                "size": 39824,                                      文件大小（字节） file_info表
                "type": "image/png",                                file_info表
                "createTime":   "2018-04-04 09:38:38",              user_file_list表
                "shareStat":    0,                                  user_file_list表
                "pv":   0                                       page view （页面浏览数量） 下载量
            }, {
                "fileName": "test.txt",
                "url":  "http://192.168.177.137:80/group1/M00/00/00/fwAAAVrFqEuAf0pcAAAADFmwwCQ3085619",
                "md5":  "6f5902ac237024bdd0c176cb93063dc4",
                "size": 12,
                "type": "text/plain",
                "createTime":   "2018-04-04 09:38:35",
                "shareStat":    0,
                "pv":   0
            }]
    }

    数据从两张表获取，sql要做表连接

    1 客户端发送文件列表请求
        {
            token:"xxxxxxxxxxxx"
        }

    2 服务端验证token确定用户id

    3 服务端查询数据库，获取到文件列表（表连接）
        select u.filename, strcat("http://ip:port/",f.file_id) as url,
                f.md5,f.size,f.type,u.createtime,u.shared_status,u.pv
            from file_info f, user u
            where f.file_id = u.file_id

        （sql待优化）

        将查询的结果整理成 json 返回给客户端

    4 客户端获取到文件列表之后，将他们显示到控件上






    文件列表的显式（QListWidget)   samples 下有 qt listwidget的案例


        显式的样式
            ui->listWidget->setViewMode(QListView::IconMode);   //设置显示图标模式
            ui->listWidget->setIconSize(QSize(80, 80));         //设置图标大小
            ui->listWidget->setGridSize(QSize(100, 120));        //设置item大小

            //设置QLisView大小改变时，图标的调整模式，默认是固定的，可以改成自动调整
            ui->listWidget->setResizeMode(QListView::Adjust);   //自动适应布局

            //设置列表可以拖动，如果想固定不能拖动，使用QListView::Static
            ui->listWidget->setMovement(QListView::Static);
            ui->listWidget->setSpacing(30); //设置图标之间的间距, 当setGridSize()时，此选项无效


            每一个文件元素，设置图标
            //添加项目
            ui->listWidget->addItem(new QListWidgetItem(QIcon("../../../../file_png/jpg.png"), "1.jpg"));
            ui->listWidget->addItem(new QListWidgetItem(QIcon("../../../../file_png/png.png"), "2.png"));
            ui->listWidget->addItem(new QListWidgetItem(QIcon("../../../../file_png/mpeg.png"), "测试很长的名字.mp4"));
            ui->listWidget->addItem(new QListWidgetItem(QIcon("../../../../file_png/tar.png"), "4.tar"))

            如何加载一个正确的图标， jpg文件 -> jpg.png 这个图标
            要手动解析出文件的后缀(QString 一些api操作) ,


            将前缀提取 比如 jpg  -> 赋值到 suffix 变量 

            const QString resourcesPrefix = ":/image/fileIcon/";   //qt 资源路径
            QString iconName = resourcesPrefix + suffix + ".png";

            //使用resource资源来判断某个资源路径是否有效，无效就使用默认icon
            QResource res(iconName);
            if(!res.isValid())
            {
                iconName=":/image/fileIcon/null.png";     //如果不能识别文件类型的图标，使用一个默认
            }


        右键菜单

            首先要先准备号一个菜单 QMenu

            //=====================================菜单1
            menuItem = new QMenu( this );

             //动作1
            downloadAction = new QAction("下载",this);
            shareAction = new QAction("分享",this);
            propertyAction = new QAction("属性",this);

            //动作1添加到菜单1
            menuItem->addAction(downloadAction);
            menuItem->addAction(shareAction);
            menuItem->addAction(propertyAction);


            菜单如何显式出来 右键的时候 ，关注一个QListWidget的信号 
            customContextMenuRequested(const QPoint pos)     pos 参数是 鼠标点击的坐标
            将鼠标坐标转化为点击了哪个图标
                QListWidgetItem *item = ui->listWidget->itemAt( pos );
                通过 itemAt 传递一个鼠标的坐标参数 ， 如果坐标命中某个item ，返回一个item指针
                没有命中（右键空白）  ，返回的是null

                根据命中的状态要提示不同的菜单


                显示菜单 
                 menuEmpty->exec( QCursor::pos() );  


    文件属性窗口
        将文件属性窗口做成一个自定义的控件，里边全是label
        构造函数定一个参数，将文件的数据都传过来，在自定义控件里边将label的信息内容都替换掉



3 文件下载的功能
    还是使用 QNetworkAccessManager 的 get方法请求
        1 最终获取到的数据   
                在finished() 信号的槽函数中实现读取数据的功能

            QByteArray content = reply -> readAll() 读出所有的文件数据 ，存到文件  
            占用内存的问题
            如果文件有 10G 大小  ，内存一下子就崩了


        2 不要等到文件数据全部到达之后再去读取
            拿到一点读取一点，马上写一点数据到硬盘上

            此时要关注 QNetworkReply 对象的 可读信号

                void readyRead()    当数据到达会持续触发这个信号

                实现槽函数
                QFile file("存储路径")；
                connect (rpl , QNetworkReply::readyRead , [=](){
                    //做一些网络错误的判断

                    QByteArray content rpl->readAll();  //将目前到达的数据全部读取出来
                    file.write(content);
                })；

                最终也要关注finish信号，当数据读完之后做一些清理工作

                connect (rpl , QNetworkReply::readyRead , [=](){
                    //做一些网络错误的判断
                    file.close(); //关闭文件
                    rpl->deleteLater();
                })；



    关于进度条的控制
        关注 reply 的donwloadProgress 信号，会在下载的过程中持续触发这个信号
        void downloadProgress(qint64 bytesReceived, qint64 bytesTotal)
            bytesReceived ，已经接收了多少个字节的数据
            bytesTotal   总共要接受的字节数



4 文件上传和下载的队列整合

    自定义控件 TransferWidget
        里边是一个tabwidget，3个页面

        上传下载两个页面都是一个 垂直 layout，里边默认放置一个弹簧

            如果有上传或者下载的任务往里边添加控件
            layout->insertWidget(0, taskWidget) ;//  往某个layout 插入一个控件


        日志页面
            是一个QListWidget 
            每次有log进来就往 listWidget添加文本
            list->addItem(const QString &label)






5 关于文件上传的一个限制

    通过nginx的server 配置添加一个选项
    client_max_body_size 50m;   #控制上传文件的大小  单位可以使用m 可以使用k g






